<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Houyonglu</title>
  
  <subtitle>Code is poetry, less is more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://houyonglu.github.io/"/>
  <updated>2020-05-19T15:37:57.483Z</updated>
  <id>https://houyonglu.github.io/</id>
  
  <author>
    <name>Houyonglu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ObjectId 的最小实现</title>
    <link href="https://houyonglu.github.io/5e40067f/"/>
    <id>https://houyonglu.github.io/5e40067f/</id>
    <published>2020-02-09T13:17:51.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; randomBytes &#125; <span class="keyword">from</span> <span class="string">'crypto'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> increaser = <span class="built_in">Math</span>.trunc(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>)</span><br><span class="line"><span class="keyword">const</span> PROCESS_UNIQUE = randomBytes(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectId</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.id = ObjectId.generate(<span class="built_in">Math</span>.trunc(<span class="built_in">Date</span>.now() / <span class="number">1000</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">'string'</span> &amp;&amp; id.length === <span class="number">24</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.id = Buffer.from(id, <span class="string">'hex'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.id = ObjectId.generate(id)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((Buffer.isBuffer(id) || <span class="built_in">Array</span>.isArray(id)) &amp;&amp; id.length === <span class="number">12</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.id = Buffer.from(id)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(</span><br><span class="line">        <span class="string">'Argument passed in must be a single String of 12 bytes or a string of 24 hex characters'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> generate(timestamp) &#123;</span><br><span class="line">    <span class="comment">// https://nodejs.org/zh-cn/docs/guides/buffer-constructor-deprecation/</span></span><br><span class="line">    <span class="comment">// const buffer = Buffer.allocUnsafe(12)</span></span><br><span class="line">    <span class="keyword">const</span> buffer = Buffer.alloc(<span class="number">12</span>)</span><br><span class="line">    <span class="keyword">const</span> counter = increaser++</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4-byte timestamp</span></span><br><span class="line">    buffer[<span class="number">3</span>] = timestamp &amp; <span class="number">0xff</span></span><br><span class="line">    buffer[<span class="number">2</span>] = (timestamp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    buffer[<span class="number">1</span>] = (timestamp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    buffer[<span class="number">0</span>] = (timestamp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5-byte process unique</span></span><br><span class="line">    buffer[<span class="number">4</span>] = PROCESS_UNIQUE[<span class="number">0</span>]</span><br><span class="line">    buffer[<span class="number">5</span>] = PROCESS_UNIQUE[<span class="number">1</span>]</span><br><span class="line">    buffer[<span class="number">6</span>] = PROCESS_UNIQUE[<span class="number">2</span>]</span><br><span class="line">    buffer[<span class="number">7</span>] = PROCESS_UNIQUE[<span class="number">3</span>]</span><br><span class="line">    buffer[<span class="number">8</span>] = PROCESS_UNIQUE[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3-byte counter</span></span><br><span class="line">    buffer[<span class="number">11</span>] = counter &amp; <span class="number">0xff</span></span><br><span class="line">    buffer[<span class="number">10</span>] = (counter &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    buffer[<span class="number">9</span>] = (counter &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> buffer</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getTimestamp() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.id.readUInt32BE(<span class="number">0</span>) * <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id.toString(<span class="string">'hex'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toJson() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用分型结构组织 React 应用</title>
    <link href="https://houyonglu.github.io/5dcff269/"/>
    <id>https://houyonglu.github.io/5dcff269/</id>
    <published>2019-11-16T12:58:17.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>分形（fractal），又称碎形、残形，通常被定义为“一个粗糙或零碎的几何形状，可以分成数个部分，且每一部分都（至少近似地）是整体缩小后的形状”，即具有自相似的性质。分形在数学中是一种抽象的物体，用于描述自然界中存在的事物。人工分形通常在放大后能展现出相似的形状。分形也被称为扩展对称或展开对称。如果在每次放大后，形状的重复是完全相同的，这被称为自相似。分形在不同的缩放级别上可以是近似相似的。</p></blockquote><h2 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h2><p>多级抽象，不同的抽象级别互不影响。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">  assets/</span><br><span class="line">    logo.svg</span><br><span class="line">  components/</span><br><span class="line">    Footer/</span><br><span class="line">      index.tsx</span><br><span class="line">  scenes/</span><br><span class="line">    Main/</span><br><span class="line">      Home/</span><br><span class="line">        components/</span><br><span class="line">          Carousel/</span><br><span class="line">            assets/</span><br><span class="line">              banner-1.png</span><br><span class="line">              banner-2.png</span><br><span class="line">            index.tsx</span><br><span class="line">          List/</span><br><span class="line">            components/</span><br><span class="line">              ListItem/</span><br><span class="line">                index.tsx</span><br><span class="line">            index.tsx</span><br><span class="line">        index.tsx</span><br><span class="line">      My/</span><br><span class="line">        index.ts</span><br><span class="line">    Account</span><br><span class="line">      SignUp/</span><br><span class="line">        index.tsx</span><br><span class="line">      SignIn/</span><br><span class="line">        index.tsx</span><br><span class="line">      PasswordReset/</span><br><span class="line">        index.tsx</span><br><span class="line">  index.tsx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;分形（fractal），又称碎形、残形，通常被定义为“一个粗糙或零碎的几何形状，可以分成数个部分，且每一部分都（至少近似地）是整体缩小后的形状”，即具有自相似的性质。分形在数学中是一种抽象的物体，用于描述自然界中存在的事物。人工分形通常在放大后能展
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FastRoute 的 JS 最小实现</title>
    <link href="https://houyonglu.github.io/5da1ab4f/"/>
    <id>https://houyonglu.github.io/5da1ab4f/</id>
    <published>2019-10-12T10:30:39.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/nikic/FastRoute" target="_blank" rel="noopener">nikic/fast-route</a> 是 PHP 中的快速路由类，通过将多条路由正则表达式合并为一条后进行匹配以提高性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(routes) &#123;</span><br><span class="line">    <span class="keyword">this</span>.routeMap = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> regexRoutes = <span class="built_in">Object</span>.entries(routes).map(<span class="function">(<span class="params">[ route, handler ]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> paramNames = []</span><br><span class="line">      <span class="keyword">const</span> regexRoute = route.replace(<span class="regexp">/:(\w*)/g</span>, (_, paramName) =&gt; &#123;</span><br><span class="line">        paramNames.push(paramName)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'([^/]+)'</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.routeMap[offset] = &#123; handler, paramNames &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (paramNames.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        offset += paramNames.length</span><br><span class="line">        <span class="keyword">return</span> regexRoute</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      offset += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;regexRoute&#125;</span>)`</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^(?:<span class="subst">$&#123;regexRoutes.join(<span class="string">'|'</span>)&#125;</span>)$`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatch(path) &#123;</span><br><span class="line">    <span class="keyword">const</span> matches = path.match(<span class="keyword">this</span>.regex)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 404</span></span><br><span class="line">    <span class="keyword">if</span> (!matches) <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> offset = matches.findIndex(<span class="function">(<span class="params">match, index</span>) =&gt;</span> (index &gt; <span class="number">0</span>) &amp;&amp; !!match)</span><br><span class="line">    <span class="keyword">const</span> &#123; handler, paramNames &#125; = <span class="keyword">this</span>.routeMap[offset]</span><br><span class="line">    <span class="keyword">const</span> routeParams = <span class="built_in">Object</span>.fromEntries(</span><br><span class="line">      paramNames.map(<span class="function"><span class="params">paramName</span> =&gt;</span> [paramName, matches[offset++]])</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    handler(routeParams)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="string">'/owner'</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'owner'</span>),</span><br><span class="line">  <span class="string">'/:owner'</span>: <span class="function"><span class="params">params</span> =&gt;</span> <span class="built_in">console</span>.log(params),</span><br><span class="line">  <span class="string">'/:owner/:repo'</span>: <span class="function"><span class="params">params</span> =&gt;</span> <span class="built_in">console</span>.log(params),</span><br><span class="line">  <span class="string">'/:owner/:repo/branches/:branch'</span>: <span class="function"><span class="params">params</span> =&gt;</span> <span class="built_in">console</span>.log(params),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; owner</span></span><br><span class="line">r.dispatch(<span class="string">'/owner'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; &#123; owner: 'facebook' &#125;</span></span><br><span class="line">r.dispatch(<span class="string">'/facebook'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; &#123; owner: 'facebook', repo: 'react' &#125;</span></span><br><span class="line">r.dispatch(<span class="string">'/facebook/react'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; &#123; owner: 'facebook', repo: 'react', branch: 'facts' &#125;</span></span><br><span class="line">r.dispatch(<span class="string">'/facebook/react/branches/facts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; </span></span><br><span class="line">r.dispatch(<span class="string">'/facebook/react/branches/facts/page/2'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/nikic/FastRoute&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nikic/fast-route&lt;/a&gt; 是 PHP 中的快速路由类，通过将多条路由正则表达式合并为一条后进行匹配以提高性
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React 高阶组件中的属性代理和反向继承</title>
    <link href="https://houyonglu.github.io/5d2c7186/"/>
    <id>https://houyonglu.github.io/5d2c7186/</id>
    <published>2019-07-15T12:28:54.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<p>React 高阶组件（HOC）主要有两种类型：属性代理和反向继承。</p><h2 id="属性代理（Props-Proxy）"><a href="#属性代理（Props-Proxy）" class="headerlink" title="属性代理（Props Proxy）"></a>属性代理（Props Proxy）</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propsProxyHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancedComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125; /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性代理的作用：</p><ul><li>操作 <code>props</code>。读取和操作传给 <code>WrappedComponent</code> 的 <code>props</code>。</li><li>通过 <code>Refs</code> 访问组件实例。读取或添加示例属性，调用实例方法。</li><li>提取组件状态。将 <code>WrappedComponent</code> 的状态提升到 <code>EnhancedComponent</code>。</li><li>用其他元素包裹 <code>WrappedComponent</code>。</li></ul><h2 id="反向继承（Inheritance-Inversion）"><a href="#反向继承（Inheritance-Inversion）" class="headerlink" title="反向继承（Inheritance Inversion）"></a>反向继承（Inheritance Inversion）</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritanceInversionHOC</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">EnhancedComponent</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反向继承的作用：</p><ul><li>提取组件 <code>state</code>。</li><li>通过 <code>super</code> 调用父类上的方法。</li><li>渲染劫持（Render Highjacking）。读取和操作组件中任何实例属性，条件渲染，包裹或修改输出的元素树。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React 高阶组件（HOC）主要有两种类型：属性代理和反向继承。&lt;/p&gt;
&lt;h2 id=&quot;属性代理（Props-Proxy）&quot;&gt;&lt;a href=&quot;#属性代理（Props-Proxy）&quot; class=&quot;headerlink&quot; title=&quot;属性代理（Props Proxy）
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 属性书写顺序</title>
    <link href="https://houyonglu.github.io/5cbef2be/"/>
    <id>https://houyonglu.github.io/5cbef2be/</id>
    <published>2019-04-23T11:10:54.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Grouped-by-Type"><a href="#Grouped-by-Type" class="headerlink" title="Grouped by Type"></a>Grouped by Type</h2><ul><li>Display &amp; Flow</li><li>Positioning</li><li>Dimensions</li><li>Margins, Padding, Borders, Outline</li><li>Typographic Styles</li><li>Backgrounds</li><li>Opacity, Cursors, Generated Content</li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.some</span> &#123;</span><br><span class="line">  <span class="comment">// Display &amp; Flow</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Positioning</span></span><br><span class="line">  <span class="attribute">z-index</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Dimensions</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Margins, Padding, Borders, Outline</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">list-style</span>: square inside;</span><br><span class="line">  <span class="attribute">border-collapse</span>: inherit;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Typographic Styles</span></span><br><span class="line">  <span class="attribute">font</span>: <span class="number">1.2em</span> <span class="string">"Fira Sans"</span>, sans-serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Backgrounds</span></span><br><span class="line">  <span class="attribute">background</span>: content-box radial-gradient(crimson, skyblue);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">5px</span> <span class="number">5px</span> red;</span><br><span class="line">  <span class="attribute">mask</span>: url(masks.svg#star) <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Opacity, Cursors, Generated Content</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">quotes</span>: <span class="string">'"'</span> <span class="string">'"'</span> <span class="string">"'"</span> <span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Grouped-by-Type&quot;&gt;&lt;a href=&quot;#Grouped-by-Type&quot; class=&quot;headerlink&quot; title=&quot;Grouped by Type&quot;&gt;&lt;/a&gt;Grouped by Type&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Display &amp;amp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 实现 1px 边框</title>
    <link href="https://houyonglu.github.io/5bc074ce/"/>
    <id>https://houyonglu.github.io/5bc074ce/</id>
    <published>2018-10-12T10:17:50.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-1px</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> (min-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: scale(.<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> (min-device-pixel-ratio: <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300%</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: scale(.<span class="number">33</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg 命令行处理音视频</title>
    <link href="https://houyonglu.github.io/5aefc256/"/>
    <id>https://houyonglu.github.io/5aefc256/</id>
    <published>2018-05-07T03:04:54.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剪切视频"><a href="#剪切视频" class="headerlink" title="剪切视频"></a>剪切视频</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 input seeking 和 copy 方式剪切 30 秒视频，速度很快</span></span><br><span class="line">ffmpeg -ss 00:00:00 -to 00:00:30 -accurate_seek -i input.mkv -codec copy -avoid_negative_ts 1 output.mkv</span><br></pre></td></tr></table></figure><h2 id="视频截图"><a href="#视频截图" class="headerlink" title="视频截图"></a>视频截图</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以 copy 方式输出第 10 秒的截图</span></span><br><span class="line">ffmpeg -ss 00:00:10 -i input.mkv -vframes 1 output.png</span><br></pre></td></tr></table></figure><h2 id="剪切视频并添加字幕并转换为-MP4"><a href="#剪切视频并添加字幕并转换为-MP4" class="headerlink" title="剪切视频并添加字幕并转换为 MP4"></a>剪切视频并添加字幕并转换为 MP4</h2><p>如果通过设置 <code>-acodec aac</code> 进行音频转换， <code>libfdk_aac</code> 库是必需的，否则需要设置 <code>-c:a aac -b:a 320k -ac 2</code> 以达到相同的效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 combined seeking 方式先定位到 01:04:50 处，再逐帧定位到 01:05:00</span></span><br><span class="line"><span class="comment"># 从 01:05:00 剪切到 01:10:00</span></span><br><span class="line"><span class="comment"># -copyts 保留原始时间戳</span></span><br><span class="line"><span class="comment"># -vcodec h264 视频以 H.264 编码</span></span><br><span class="line"><span class="comment"># -acodec aac 音频以 AAC 编码</span></span><br><span class="line"><span class="comment"># subtitles=mySubtitles.ass 字幕文件，不需要重设字幕文件时间</span></span><br><span class="line"><span class="comment"># 该方法适合用于剪切大文件</span></span><br><span class="line">ffmpeg -ss 01:04:50 -i input.mkv -ss 01:05:00 -to 01:10:00 -copyts -c:v libx264 -c:a aac -b:a 320k -ac 2 -vf subtitles=mySubtitles.ass output.mp4</span><br></pre></td></tr></table></figure><h2 id="压缩视频"><a href="#压缩视频" class="headerlink" title="压缩视频"></a>压缩视频</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩为 720P</span></span><br><span class="line">ffmpeg -i input.mp4 -s hd720 output.mp4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩为 480P</span></span><br><span class="line"><span class="comment"># -movflags +faststart 将 meta 信息移至头部，无需下载完成即可播放</span></span><br><span class="line">ffmpeg -i input.mp4 -s hd480 -movflags +faststart output.mp4</span><br></pre></td></tr></table></figure><h2 id="视频转-GIF"><a href="#视频转-GIF" class="headerlink" title="视频转 GIF"></a>视频转 GIF</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 palette</span></span><br><span class="line">ffmpeg -i input.mp4 -vf fps=15,scale=320:-1:flags=lanczos,palettegen palette.png</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 palette 生成 GIF 能更好地控制输出大小</span></span><br><span class="line">ffmpeg -i input.mp4 -i palette.png -filter_complex <span class="string">"fps=15,scale=320:-1:flags=lanczos[x];[x][1:v]paletteuse"</span> output.gif</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剪切视频&quot;&gt;&lt;a href=&quot;#剪切视频&quot; class=&quot;headerlink&quot; title=&quot;剪切视频&quot;&gt;&lt;/a&gt;剪切视频&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 数组扁平化</title>
    <link href="https://houyonglu.github.io/5acf0437/"/>
    <id>https://houyonglu.github.io/5acf0437/</id>
    <published>2018-04-12T07:01:11.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="扁平一层"><a href="#扁平一层" class="headerlink" title="扁平一层"></a>扁平一层</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11]]]], 12, 13]</span></span><br><span class="line">flatten([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>, [<span class="number">8</span>, <span class="number">9</span>, [<span class="number">10</span>, <span class="number">11</span>]]]]], [<span class="number">12</span>, <span class="number">13</span>]])</span><br></pre></td></tr></table></figure><h2 id="扁平所有层"><a href="#扁平所有层" class="headerlink" title="扁平所有层"></a>扁平所有层</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(curr)</span><br><span class="line">      ? prev.concat(flatten(curr))</span><br><span class="line">      : prev.concat([curr])</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]</span></span><br><span class="line">flatten([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>, [<span class="number">8</span>, <span class="number">9</span>, [<span class="number">10</span>, <span class="number">11</span>]]]]], [<span class="number">12</span>, <span class="number">13</span>]])</span><br></pre></td></tr></table></figure><h2 id="扁平-N-层"><a href="#扁平-N-层" class="headerlink" title="扁平 N 层"></a>扁平 N 层</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr, depth</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(curr)</span><br><span class="line">      ? prev.concat(depth &gt; <span class="number">1</span> ? flatten(curr, depth - <span class="number">1</span>) : curr)</span><br><span class="line">      : prev.concat([curr])</span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; [1, 2, 3, 4, 5, 6, 7, [8, 9, [10, 11]], 12, 13]</span></span><br><span class="line">flatten([<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>, [<span class="number">8</span>, <span class="number">9</span>, [<span class="number">10</span>, <span class="number">11</span>]]]]], [<span class="number">12</span>, <span class="number">13</span>]], <span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;扁平一层&quot;&gt;&lt;a href=&quot;#扁平一层&quot; class=&quot;headerlink&quot; title=&quot;扁平一层&quot;&gt;&lt;/a&gt;扁平一层&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 新特性中的层叠上下文及影响</title>
    <link href="https://houyonglu.github.io/5a6af005/"/>
    <id>https://houyonglu.github.io/5a6af005/</id>
    <published>2018-01-26T09:08:21.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS中层叠上下文"><a href="#CSS中层叠上下文" class="headerlink" title="CSS中层叠上下文"></a>CSS中层叠上下文</h2><p>形成条件：</p><ul><li>根元素 （<code>HTML</code>）</li><li><code>z-index</code> 值不为 <code>auto</code> 的绝对/相对定位</li><li>一个 <code>z-index</code> 值不为 <code>auto</code> 的 <code>Flex</code> 项目（<code>flex item</code>）</li><li><code>position: fixed</code></li><li><code>opacity</code> 属性值小于 <code>1</code></li><li><code>transform</code> 属性值不为 <code>none</code></li><li><code>mix-blend-mode</code>性值不为 <code>normal</code></li><li><code>filter</code> 值不为 <code>none</code></li><li><code>will-change</code> 中指定了任意 CSS 属性</li><li><code>mix-blend-mode</code> 属性值不为 <code>normal</code></li><li><code>-webkit-overflow-scrolling</code> 属性被设置 <code>touch</code></li></ul><p>总结：</p><ul><li>给一个 HTML 元素定位和 <code>z-index</code> 赋值创建一个层叠上下文。</li><li>层叠上下文可以包含在其他层叠上下文中，并且一起创建一个有层级的层叠上下文。</li><li>每个层叠上下文完全独立于它的兄弟元素：当处理层叠时只考虑子元素。</li><li>每个层叠上下文是自包含的：当元素的内容发生层叠后，整个该元素将会在父层叠上下文中按顺序进行层叠。</li></ul><p>内容来自: <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context" target="_blank" rel="noopener">层叠上下文</a></p><h2 id="对普通元素的影响"><a href="#对普通元素的影响" class="headerlink" title="对普通元素的影响"></a>对普通元素的影响</h2><ul><li>提升元素的层叠顺序</li><li>限制 <code>position: fixed</code> 的跟随效果</li><li>改变 <code>overflow</code> 对 <code>absolute</code> 元素的限制</li><li>限制 <code>absolute</code> 元素的 <code>100%</code> 宽度大小</li><li>进行变换时造成变换元素的父元素闪烁</li></ul><p><a href="https://codepen.io/anon/pen/ZvgOLO" target="_blank" rel="noopener">Check which CSS3 features the browser recognizes</a> 是我制作的一个简单 Demo，用于展示 CSS 新特性是如何提升元素的层叠顺序的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transform"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sibling"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 显式设置父元素的层叠顺序 */</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 显式设置变换元素的层叠顺序 */</span></span><br><span class="line"><span class="selector-class">.transform</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 显式设置变换元素的兄弟元素的层叠顺序 */</span></span><br><span class="line"><span class="selector-class">.sibling</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS中层叠上下文&quot;&gt;&lt;a href=&quot;#CSS中层叠上下文&quot; class=&quot;headerlink&quot; title=&quot;CSS中层叠上下文&quot;&gt;&lt;/a&gt;CSS中层叠上下文&lt;/h2&gt;&lt;p&gt;形成条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根元素 （&lt;code&gt;HTML&lt;/code&gt;）
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PostCSS 管理媒体查询</title>
    <link href="https://houyonglu.github.io/5a508a26/"/>
    <id>https://houyonglu.github.io/5a508a26/</id>
    <published>2018-01-06T08:34:46.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="断点设置"><a href="#断点设置" class="headerlink" title="断点设置"></a>断点设置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/* 容器的水平间距，作为断点的偏移量 */</span></span><br><span class="line">  <span class="attribute">--gap</span>: <span class="number">32px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 960, 1152, and 1344 可以被 12 和 16 整除 */</span></span><br><span class="line">  <span class="attribute">--tablet</span>: <span class="number">769px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 960px container + 4rem */</span></span><br><span class="line">  <span class="attribute">--desktop</span>: <span class="built_in">calc</span>(<span class="number">960px</span> + var(--gap) * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1152px container + 4rem */</span></span><br><span class="line">  <span class="attribute">--widescreen</span>: <span class="built_in">calc</span>(<span class="number">1152px</span> + var(--gap) * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1344px container + 4rem */</span></span><br><span class="line">  <span class="attribute">--fullhd</span>: <span class="built_in">calc</span>(<span class="number">1344px</span> + var(--gap) * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查阅 <a href="https://bulma.io/documentation/overview/responsiveness/" target="_blank" rel="noopener">Bulma Responsiveness</a>。</p><h2 id="自定义媒体查询"><a href="#自定义媒体查询" class="headerlink" title="自定义媒体查询"></a>自定义媒体查询</h2><p>按当前 <a href="https://drafts.csswg.org/mediaqueries/#mq-range-context" target="_blank" rel="noopener">CSS Media Queries Level 4</a> 规范，不能在媒体查询中使用 <code>var()</code>，因为媒体查询不从 <code>:root</code> 继承。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@custom-media</span> --mobile (width &lt; <span class="number">769px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --tablet-<span class="keyword">only</span> (<span class="number">769px</span> &lt;= width &lt; <span class="number">1024px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --touch (width &lt;= <span class="number">1024px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --tablet (width &gt;= <span class="number">769px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --desktop-<span class="keyword">only</span> (<span class="number">1024px</span> &lt;= width &lt; <span class="number">1216px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --desktop (width &gt;= <span class="number">1024px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --widescreen-<span class="keyword">only</span> (<span class="number">1216px</span> &lt;= width &lt; <span class="number">1408px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --widescreen (width &gt;= <span class="number">1024px</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@custom-media</span> --fullhd (width &gt;= <span class="number">1408px</span>);</span><br></pre></td></tr></table></figure><h2 id="使用媒体查询"><a href="#使用媒体查询" class="headerlink" title="使用媒体查询"></a>使用媒体查询</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (--mobile) <span class="keyword">and</span> (<span class="attribute">orientation:</span> landscape) &#123;</span><br><span class="line">  <span class="comment">/* styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;断点设置&quot;&gt;&lt;a href=&quot;#断点设置&quot; class=&quot;headerlink&quot; title=&quot;断点设置&quot;&gt;&lt;/a&gt;断点设置&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不常用 CSS 方法笔记</title>
    <link href="https://houyonglu.github.io/5a4c3ac6/"/>
    <id>https://houyonglu.github.io/5a4c3ac6/</id>
    <published>2018-01-03T02:07:02.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文字两端对齐"><a href="#文字两端对齐" class="headerlink" title="文字两端对齐"></a>文字两端对齐</h2><p><code>text-align-last</code> 描述的是一段文本中最后一行在被强制换行之前的对齐规则，对于单行文本可实现两端对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">text-align-last</span>: justify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置鼠标事件"><a href="#设置鼠标事件" class="headerlink" title="设置鼠标事件"></a>设置鼠标事件</h2><p><code>pointer-events</code> 属性指定在什么情况下某个特定的图形元素可以成为鼠标事件的 <code>target</code>。主要用于 <code>svg</code>，对于普通元素，可用于取消鼠标事件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.disabled</span> &#123;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本模糊效果"><a href="#文本模糊效果" class="headerlink" title="文本模糊效果"></a>文本模糊效果</h2><p>设置模糊半径可控制模糊程度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blur</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承当前主体颜色"><a href="#继承当前主体颜色" class="headerlink" title="继承当前主体颜色"></a>继承当前主体颜色</h2><p>变量关键词 <code>currentColor</code> 可以让能够接受 <code>color</code> 值的属性继承当前主体颜色，多用于渐变和动画。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#F44336</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid currentColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: currentColor transparent transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="黑白图像"><a href="#黑白图像" class="headerlink" title="黑白图像"></a>黑白图像</h2><p>CSS <code>filter</code> 属性可实现图像的模糊、锐化、变色效果，也可用于创建复杂的滤镜。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-class">.blackAndWhitePhoto</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="content-属性-attr-实现解耦"><a href="#content-属性-attr-实现解耦" class="headerlink" title="content 属性 attr 实现解耦"></a>content 属性 attr 实现解耦</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-tip</span>=<span class="string">"Some tips"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-tip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文字两端对齐&quot;&gt;&lt;a href=&quot;#文字两端对齐&quot; class=&quot;headerlink&quot; title=&quot;文字两端对齐&quot;&gt;&lt;/a&gt;文字两端对齐&lt;/h2&gt;&lt;p&gt;&lt;code&gt;text-align-last&lt;/code&gt; 描述的是一段文本中最后一行在被强制换行之前的对齐规
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP 下载远程大文件</title>
    <link href="https://houyonglu.github.io/5a44a002/"/>
    <id>https://houyonglu.github.io/5a44a002/</id>
    <published>2017-12-28T07:40:50.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<p>通过为 <code>cURL</code> 设置一个可写的文件流解决文件被写入磁盘之前占用过多内存的问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载远程大文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string $url 远程 URL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  resource $dist 本地路径或 resource 句柄</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean true 或错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadDistantFile</span><span class="params">($url, $dist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $ch = curl_init();</span><br><span class="line"></span><br><span class="line">  curl_setopt_array($ch, [</span><br><span class="line">    CURLOPT_FILE =&gt; is_resource($dist) ? $dist : fopen($dist, <span class="string">'w'</span>),</span><br><span class="line">    CURLOPT_FOLLOWLOCATION =&gt; <span class="keyword">true</span>,  <span class="comment">// 处理重定向</span></span><br><span class="line">    CURLOPT_MAXREDIRS =&gt; <span class="number">10</span>,  <span class="comment">// 限制最大重定向次数</span></span><br><span class="line">    CURLOPT_URL =&gt; $url,</span><br><span class="line">    CURLOPT_FAILONERROR =&gt; <span class="keyword">true</span>,  <span class="comment">// 大于400的状态码将抛出错误           </span></span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> curl_exec($ch) === <span class="keyword">false</span> ? curl_error($ch) : <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过为 &lt;code&gt;cURL&lt;/code&gt; 设置一个可写的文件流解决文件被写入磁盘之前占用过多内存的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS 中的随机数</title>
    <link href="https://houyonglu.github.io/5a3233b2/"/>
    <id>https://houyonglu.github.io/5a3233b2/</id>
    <published>2017-12-14T08:17:54.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两数之间的随机数"><a href="#两数之间的随机数" class="headerlink" title="两数之间的随机数"></a>两数之间的随机数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomArbitrary</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (max - min) + min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两数之间（包含两数）的随机整数"><a href="#两数之间（包含两数）的随机整数" class="headerlink" title="两数之间（包含两数）的随机整数"></a>两数之间（包含两数）的随机整数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomIntInclusive</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  min = <span class="built_in">Math</span>.ceil(min)</span><br><span class="line">  max = <span class="built_in">Math</span>.floor(max)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="符合密码学要求的安全的随机值"><a href="#符合密码学要求的安全的随机值" class="headerlink" title="符合密码学要求的安全的随机值"></a>符合密码学要求的安全的随机值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.crypto.getRandomValues(<span class="keyword">new</span> <span class="built_in">Uint32Array</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="简单的随机字符串"><a href="#简单的随机字符串" class="headerlink" title="简单的随机字符串"></a>简单的随机字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="随机排列数组"><a href="#随机排列数组" class="headerlink" title="随机排列数组"></a>随机排列数组</h2><p>使用 <code>Fisher–Yates shuffle</code> 算法可以高效地实现等概率的随机排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = arr.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (index) &#123;</span><br><span class="line">    <span class="keyword">const</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * index--)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> ([arr[index], arr[random]] = [arr[random], arr[index]])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.sort(comparefn) 并不能真正地随机打乱数组</span></span><br><span class="line"><span class="comment">// comparefn 对于同一组 a 、b 需要返回相同的比较结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;两数之间的随机数&quot;&gt;&lt;a href=&quot;#两数之间的随机数&quot; class=&quot;headerlink&quot; title=&quot;两数之间的随机数&quot;&gt;&lt;/a&gt;两数之间的随机数&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ffmpeg 将 GIF 转为 MP4</title>
    <link href="https://houyonglu.github.io/5a31da1f/"/>
    <id>https://houyonglu.github.io/5a31da1f/</id>
    <published>2017-12-14T01:55:43.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GIF-转换为-MP4"><a href="#GIF-转换为-MP4" class="headerlink" title="GIF 转换为 MP4"></a>GIF 转换为 MP4</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -f gif -i <span class="string">"FOO.gif"</span> -pix_fmt yuv420p -c:v libx264 -movflags +faststart -filter:v crop=<span class="string">'floor(in_w/2)*2:floor(in_h/2)*2'</span> <span class="string">"BAR.mp4"</span></span><br></pre></td></tr></table></figure><blockquote><p>输出的 MP4 文件通过 H.264 编码，兼容 Windows, Mac OSX, Android, iOS。所有主流系统都支持 MP4 格式文件，没有必要生成额外的编码速度更慢的 webm 格式文件。<code>-movflags +faststart</code> 参数可让视频无需完成加载即可播放。压缩比通常为 10 : 1，但将小于 512KB 的 GIF 转换为 MP4 效益较低。</p></blockquote><h2 id="生成最多不超过-9-张关键帧缩略图"><a href="#生成最多不超过-9-张关键帧缩略图" class="headerlink" title="生成最多不超过 9 张关键帧缩略图"></a>生成最多不超过 9 张关键帧缩略图</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -skip_frame nokey -i <span class="string">"BAR.mp4"</span> -vsync 0 -vframes 9 -c:v mjpeg <span class="string">"thumb_%d.jpg"</span></span><br></pre></td></tr></table></figure><p><small>*注： 生成的缩略图数量可能小于指定数量。 *</small></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GIF-转换为-MP4&quot;&gt;&lt;a href=&quot;#GIF-转换为-MP4&quot; class=&quot;headerlink&quot; title=&quot;GIF 转换为 MP4&quot;&gt;&lt;/a&gt;GIF 转换为 MP4&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RGBA, RGB, HEX 转换</title>
    <link href="https://houyonglu.github.io/5a251691/"/>
    <id>https://houyonglu.github.io/5a251691/</id>
    <published>2017-12-04T09:34:09.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<p>所有颜色均使用数组表示，如 <code>RGBA(0, 0, 0, 0.87)</code> 表示为 <code>[0, 0, 0, 0.87]</code> ，<code>RGB(33, 33, 33)</code> 表示为 <code>[33, 33, 33]</code>， <code>#212121</code> 表示为 <code>[21, 21, 21]</code>。</p><h2 id="RGBA-to-RGB"><a href="#RGBA-to-RGB" class="headerlink" title="RGBA to RGB"></a>RGBA to RGB</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RGBAtoRGB</span>(<span class="params">background, foreground</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [backRed, backGreen, backBlue] = background</span><br><span class="line">  <span class="keyword">const</span> [foreRed, foreGreen, foreBlue, foreAlpha] = foreground</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="built_in">Math</span>.round((<span class="number">1</span> - foreAlpha) * backRed + foreAlpha * foreRed),</span><br><span class="line">    <span class="built_in">Math</span>.round((<span class="number">1</span> - foreAlpha) * backGreen + foreAlpha * foreGreen),</span><br><span class="line">    <span class="built_in">Math</span>.round((<span class="number">1</span> - foreAlpha) * backBlue + foreAlpha * foreBlue)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGBA(0, 0, 0, 0.87) =&gt; RGB(33, 33, 33)</span></span><br><span class="line">RGBAtoRGB([<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.87</span>])</span><br></pre></td></tr></table></figure><h2 id="RGB-to-HEX"><a href="#RGB-to-HEX" class="headerlink" title="RGB to HEX"></a>RGB to HEX</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RGBtoHEX</span>(<span class="params">[red, green, blue]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [red, green, blue].map(<span class="function"><span class="params">value</span> =&gt;</span> value.toString(<span class="number">16</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB(33, 33, 33) =&gt; #212121</span></span><br><span class="line">RGBtoHEX([<span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>])</span><br></pre></td></tr></table></figure><h2 id="HEX-to-RGB"><a href="#HEX-to-RGB" class="headerlink" title="HEX to RGB"></a>HEX to RGB</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HEXtoRGB</span>(<span class="params">[red, green, blue]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [red, green, blue].map(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">parseInt</span>(value, <span class="number">16</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #212121 =&gt; RGB(33, 33, 33)</span></span><br><span class="line">HEXtoRGB([<span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所有颜色均使用数组表示，如 &lt;code&gt;RGBA(0, 0, 0, 0.87)&lt;/code&gt; 表示为 &lt;code&gt;[0, 0, 0, 0.87]&lt;/code&gt; ，&lt;code&gt;RGB(33, 33, 33)&lt;/code&gt; 表示为 &lt;code&gt;[33, 33, 33]&lt;/cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PAC 实现基于域名的自动代理</title>
    <link href="https://houyonglu.github.io/5a16a808/"/>
    <id>https://houyonglu.github.io/5a16a808/</id>
    <published>2017-11-23T10:50:48.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最简单的-PAC-示例"><a href="#最简单的-PAC-示例" class="headerlink" title="最简单的 PAC 示例"></a>最简单的 PAC 示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindProxyForURL</span>(<span class="params">URL, HOST</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// google.com 则通过本地 8686 端口 SOCKS5 协议访问</span></span><br><span class="line">  <span class="comment">// 其它域名直接访问</span></span><br><span class="line">  <span class="keyword">return</span> HOST === <span class="string">'google.com'</span> ? <span class="string">'SOCKS5 127.0.0.1:8686'</span> : <span class="string">'DIRECT'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适用于-shadowSocks-轻量高效的配置文件"><a href="#适用于-shadowSocks-轻量高效的配置文件" class="headerlink" title="适用于 shadowSocks 轻量高效的配置文件"></a>适用于 shadowSocks 轻量高效的配置文件</h2><p><small><em>注： 以下将 <code>com.hk</code> 、 <code>co.jp</code> 、 <code>gov.cn</code> 等视为顶级域名（TLD）。</em></small></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 黑名单</span></span><br><span class="line"><span class="keyword">const</span> blacklist = &#123;</span><br><span class="line">  <span class="string">'google.com.hk'</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindProxyForURL</span>(<span class="params">URL, HOST</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 分割域名并反转</span></span><br><span class="line">  <span class="comment">// www.google.com.hk  =&gt;  ['hk', 'com', 'google', 'www']</span></span><br><span class="line">  <span class="keyword">const</span> splitHost = HOST.split(<span class="string">'.'</span>).reverse()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取二级域名的偏移值</span></span><br><span class="line">  <span class="keyword">const</span> offset = [<span class="string">'com'</span>, <span class="string">'co'</span>, <span class="string">'org'</span>, <span class="string">'net'</span>, <span class="string">'gov'</span>].includes(splitHost[<span class="number">1</span>]) ? <span class="number">3</span> : <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取出二级域名</span></span><br><span class="line">  <span class="comment">// ['hk', 'com', 'google', 'www']  =&gt;  google.com.hk</span></span><br><span class="line">  <span class="keyword">const</span> SLD = splitHost.slice(<span class="number">0</span>, offset).reverse().join(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果黑名单中存在该二级域名则通过 shadowSocks 访问</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.hasOwnProperty.call(blacklist, SLD)</span><br><span class="line">    ? <span class="string">'SOCKS5 127.0.0.1:8686'</span></span><br><span class="line">    : <span class="string">'DIRECT'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将域名绑定到本地-Web-服务器"><a href="#将域名绑定到本地-Web-服务器" class="headerlink" title="将域名绑定到本地 Web 服务器"></a>将域名绑定到本地 Web 服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindProxyForURL</span>(<span class="params">URL, HOST</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> HOST === <span class="string">'laravel.dev'</span> ? <span class="string">'HTTP 127.0.0.1:80'</span> : <span class="string">'DIRECT'</span>    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><small><em>注： 该方法同样适用于拦截指定域名。</em></small></p><h2 id="其它高级用法"><a href="#其它高级用法" class="headerlink" title="其它高级用法"></a>其它高级用法</h2><p>PAC 还支持很多其它的高级用法，具体见 <a href="https://findproxyforurl.com/pac-functions/" target="_blank" rel="noopener">PAC Functions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最简单的-PAC-示例&quot;&gt;&lt;a href=&quot;#最简单的-PAC-示例&quot; class=&quot;headerlink&quot; title=&quot;最简单的 PAC 示例&quot;&gt;&lt;/a&gt;最简单的 PAC 示例&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>几个不常用的 CSS 选择器、属性、表达式</title>
    <link href="https://houyonglu.github.io/5a093768/"/>
    <id>https://houyonglu.github.io/5a093768/</id>
    <published>2017-11-13T06:10:48.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部分CSS选择器、属性、表达式"><a href="#部分CSS选择器、属性、表达式" class="headerlink" title="部分CSS选择器、属性、表达式"></a>部分CSS选择器、属性、表达式</h2><h3 id="attr"><a href="#attr" class="headerlink" title="attr"></a>attr</h3><blockquote><p><code>attr()</code> 表达式用来获取选择到的元素的某一 HTML 属性值，并用于其样式。它也可以用于伪元素，属性值采用伪元素所依附的元素。</p></blockquote><h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><blockquote><p><code>content</code> 属性用于在元素的  ::before 和 ::after 伪元素中插入内容。使用 <code>content</code> 属性插入的内容都是匿名的可替换元素。</p></blockquote><h3 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h3><blockquote><p><code>:empty</code> 表示没有子元素的元素。子元素只可以是元素节点或文本（包括空格），无论一个元素是否为 (empty 或 not), 注释或处理指令都不会产生影响。</p></blockquote><h3 id="valid-amp-invalid"><a href="#valid-amp-invalid" class="headerlink" title=":valid &amp; :invalid"></a>:valid &amp; :invalid</h3><blockquote><p><code>:valid</code> 和 <code>:invalid</code> 表示任何其内容根据设置的输入类型正确（不正确）地验证的 <code>&lt;input&gt;</code> 或  <code>&lt;input&gt;</code> 元素。</p></blockquote><h3 id="target"><a href="#target" class="headerlink" title=":target"></a>:target</h3><blockquote><p>伪类选择器 <code>:target</code> 代表一个特殊的元素，它的id是URI的片段标识符。</p></blockquote><h3 id="selection"><a href="#selection" class="headerlink" title="::selection"></a>::selection</h3><blockquote><p><code>::selection</code> 应用于文档中被用户高亮的部分（比如使用鼠标或其他选择设备选中的部分）。</p></blockquote><h2 id="一些应用"><a href="#一些应用" class="headerlink" title="一些应用"></a>一些应用</h2><h3 id="Tooltip"><a href="#Tooltip" class="headerlink" title="Tooltip"></a>Tooltip</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-tip</span>=<span class="string">"some tips"</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-tip);</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为只有-href-属性的的链接添加文本值"><a href="#为只有-href-属性的的链接添加文本值" class="headerlink" title="为只有 href 属性的的链接添加文本值"></a>为只有 href 属性的的链接添加文本值</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">'http'</span>]</span><span class="selector-pseudo">:empty</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(href);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;部分CSS选择器、属性、表达式&quot;&gt;&lt;a href=&quot;#部分CSS选择器、属性、表达式&quot; class=&quot;headerlink&quot; title=&quot;部分CSS选择器、属性、表达式&quot;&gt;&lt;/a&gt;部分CSS选择器、属性、表达式&lt;/h2&gt;&lt;h3 id=&quot;attr&quot;&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 百分比值的理解和应用</title>
    <link href="https://houyonglu.github.io/5a012b59/"/>
    <id>https://houyonglu.github.io/5a012b59/</id>
    <published>2017-11-07T03:41:13.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百分比值是相对值"><a href="#百分比值是相对值" class="headerlink" title="百分比值是相对值"></a>百分比值是相对值</h2><p>在大多数情况下，即使将一个属性的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/specified_value" target="_blank" rel="noopener">指定值</a> 设置为相对值，其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/used_value" target="_blank" rel="noopener">应用值</a> 也会被替换为像素值。也就是说， <strong>百分比值的属性的最终值为像素值，并由它的参照物决定</strong>。</p><h2 id="百分比值的参照"><a href="#百分比值的参照" class="headerlink" title="百分比值的参照"></a>百分比值的参照</h2><h4 id="width-amp-Height"><a href="#width-amp-Height" class="headerlink" title="width &amp; Height"></a>width &amp; Height</h4><p><code>margin</code> 和 <code>padding</code> 参照都是包含块的宽度。当一个元素的高度使用百分比值，如果其包含块没有明确的高度定义，且这个元素不是绝对定位，则该百分比值等同于 <code>auto</code>。如果元素是根元素，它的包含块是视口提供的初始包含块，初始包含块任何时候都被认为是有高度定义的，且等于视口高度。</p><h4 id="margin-amp-padding"><a href="#margin-amp-padding" class="headerlink" title="margin &amp; padding"></a>margin &amp; padding</h4><p>对于某个元素的 <code>margin</code> 和 <code>padding</code>，其任意方向的百分比值的参照包含块的宽度。如果包含块的宽度取决于该元素，那么百分比值的使用结果相当于未定义。</p><h4 id="top-amp-right-amp-bottom-amp-left"><a href="#top-amp-right-amp-bottom-amp-left" class="headerlink" title="top &amp; right &amp; bottom &amp; left"></a>top &amp; right &amp; bottom &amp; left</h4><p><code>top</code> <code>bottom</code> 参照包含块的高度，<code>bottom</code> <code>left</code> 参照包含块的宽度。</p><h4 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h4><p><code>background-position</code> 参照一个减法计算值，计算公式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">positionX = (containerWidth - backgroundImageWidth) * percentX;</span><br><span class="line">positionY = (containerHeight - backgroundImageHeight) * percentY;</span><br></pre></td></tr></table></figure><h4 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h4><p>参照直接父元素的 <code>font-size</code></p><h4 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h4><p>参照元素自身的<code>font-size</code></p><h4 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h4><p>参照元素自身的<code>line-height</code></p><h4 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h4><p><code>border-radius</code> 水平半轴参照盒模型的宽度，垂直半轴参照盒模型的高度。</p><h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p><code>translateX</code> <code>scaleX</code> 参照变换边缘的宽度， <code>translateY</code> <code>scaleY</code>参照变换边缘的高度。</p><h2 id="百分比值的继承"><a href="#百分比值的继承" class="headerlink" title="百分比值的继承"></a>百分比值的继承</h2><p>当百分比值用于可继承属性时，只有最终值会被继承，而不是百分比值本身。</p><h2 id="百分比值的应用"><a href="#百分比值的应用" class="headerlink" title="百分比值的应用"></a>百分比值的应用</h2><h4 id="等比缩放"><a href="#等比缩放" class="headerlink" title="等比缩放"></a>等比缩放</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="未知宽高元素水平垂直居中"><a href="#未知宽高元素水平垂直居中" class="headerlink" title="未知宽高元素水平垂直居中"></a>未知宽高元素水平垂直居中</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;百分比值是相对值&quot;&gt;&lt;a href=&quot;#百分比值是相对值&quot; class=&quot;headerlink&quot; title=&quot;百分比值是相对值&quot;&gt;&lt;/a&gt;百分比值是相对值&lt;/h2&gt;&lt;p&gt;在大多数情况下，即使将一个属性的 &lt;a href=&quot;https://developer.mo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS 实现未知宽高元素水平垂直居中</title>
    <link href="https://houyonglu.github.io/5a011800/"/>
    <id>https://houyonglu.github.io/5a011800/</id>
    <published>2017-11-07T02:18:40.000Z</published>
    <updated>2020-05-19T15:37:57.483Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Absolute-positioning-Transform"><a href="#Absolute-positioning-Transform" class="headerlink" title="Absolute positioning + Transform"></a>Absolute positioning + Transform</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
</feed>
